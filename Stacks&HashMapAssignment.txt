                              Stacks Assignment

Ans 1.

import java.util.Stack;

public class LargestRectangle {
    public static int maximalRectangle(char[][] matrix) {
        if (matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }

        int maxArea = 0;
        int[] heights = new int[matrix[0].length];
        
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                heights[j] = matrix[i][j] == '1' ? heights[j] + 1 : 0;
            }
            maxArea = Math.max(maxArea, maxRectangleArea(heights));
        }

        return maxArea;
    }

    private static int maxRectangleArea(int[] heights) {
        Stack<Integer> stack = new Stack<>();
        int maxArea = 0;
        int index = 0;

        while (index < heights.length) {
            if (stack.isEmpty() || heights[index] >= heights[stack.peek()]) {
                stack.push(index++);
            } else {
                int top = stack.pop();
                maxArea = Math.max(maxArea, heights[top] * (stack.isEmpty() ? index : index - stack.peek() - 1));
            }
        }

        while (!stack.isEmpty()) {
            int top = stack.pop();
            maxArea = Math.max(maxArea, heights[top] * (stack.isEmpty() ? index : index - stack.peek() - 1));
        }

        return maxArea;
    }

    public static void main(String[] args) {
        char[][] matrix1 = {
            {'1', '0', '1', '0', '0'},
            {'1', '0', '1', '1', '1'},
            {'1', '1', '1', '1', '1'},
            {'1', '0', '0', '1', '0'}
        };
        System.out.println("Maximal Rectangle Area: " + maximalRectangle(matrix1)); // Output: 6

        char[][] matrix2 = {
            {'0'}
        };
        System.out.println("Maximal Rectangle Area: " + maximalRectangle(matrix2)); // Output: 0

        char[][] matrix3 = {
            {'1'}
        };
        System.out.println("Maximal Rectangle Area: " + maximalRectangle(matrix3)); // Output: 1
    }
}


Ans 2.

import java.util.Stack;

public class DecodeString {
    public static String decodeString(String s) {
        Stack<Integer> countStack = new Stack<>();
        Stack<StringBuilder> stringStack = new Stack<>();
        StringBuilder currentString = new StringBuilder();
        int currentCount = 0;

        for (char c : s.toCharArray()) {
            if (Character.isDigit(c)) {
                currentCount = currentCount * 10 + (c - '0');
            } else if (c == '[') {
                countStack.push(currentCount);
                stringStack.push(currentString);
                currentString = new StringBuilder();
                currentCount = 0;
            } else if (c == ']') {
                StringBuilder temp = currentString;
                currentString = stringStack.pop();
                int count = countStack.pop();
                for (int i = 0; i < count; i++) {
                    currentString.append(temp);
                }
            } else {
                currentString.append(c);
            }
        }

        return currentString.toString();
    }

    public static void main(String[] args) {
        String s1 = "3[a]2[bc]";
        System.out.println("Decoded String: " + decodeString(s1)); // Output: "aaabcbc"

        String s2 = "3[a2[c]]";
        System.out.println("Decoded String: " + decodeString(s2)); // Output: "accaccacc"

        String s3 = "2[abc]3[cd]ef";
        System.out.println("Decoded String: " + decodeString(s3)); // Output: "abcabccdcdcdef"
    }
}



Ans 3.

import java.util.Stack;

public class BaseballGame {
    public static int calPoints(String[] ops) {
        Stack<Integer> stack = new Stack<>();
        for (String op : ops) {
            switch (op) {
                case "C":
                    stack.pop();
                    break;
                case "D":
                    stack.push(stack.peek() * 2);
                    break;
                case "+":
                    int top = stack.pop();
                    int newTop = top + stack.peek();
                    stack.push(top);
                    stack.push(newTop);
                    break;
                default:
                    stack.push(Integer.parseInt(op));
                    break;
            }
        }

        int total = 0;
        while (!stack.isEmpty()) {
            total += stack.pop();
        }

        return total;
    }

    public static void main(String[] args) {
        String[] ops1 = {"5", "2", "C", "D", "+"};
        System.out.println("Total Points: " + calPoints(ops1)); // Output: 30

        String[] ops2 = {"5", "-2", "4", "C", "D", "9", "+", "+"};
        System.out.println("Total Points: " + calPoints(ops2)); // Output: 27

        String[] ops3 = {"1", "C"};
        System.out.println("Total Points: " + calPoints(ops3)); // Output: 0
    }
}


Ans 4.

import java.util.Stack;

public class AsteroidsCollision {
    public static int[] asteroidCollision(int[] asteroids) {
        Stack<Integer> stack = new Stack<>();
        
        for (int asteroid : asteroids) {
            boolean isDestroyed = false;
            while (!stack.isEmpty() && stack.peek() > 0 && asteroid < 0) {
                if (stack.peek() < -asteroid) {
                    stack.pop();
                } else if (stack.peek() == -asteroid) {
                    stack.pop();
                    isDestroyed = true;
                    break;
                } else {
                    isDestroyed = true;
                    break;
                }
            }
            if (!isDestroyed && (stack.isEmpty() || asteroid > 0)) {
                stack.push(asteroid);
            }
        }
        
        int[] result = new int[stack.size()];
        for (int i = stack.size() - 1; i >= 0; i--) {
            result[i] = stack.pop();
        }
        
        return result;
    }

    public static void main(String[] args) {
        int[] asteroids1 = {5, 10, -5};
        printArray(asteroidCollision(asteroids1)); // Output: [5, 10]

        int[] asteroids2 = {8, -8};
        printArray(asteroidCollision(asteroids2)); // Output: []

        int[] asteroids3 = {10, 2, -5};
        printArray(asteroidCollision(asteroids3)); // Output: [10]
    }

    private static void printArray(int[] arr) {
        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}



Ans 5.

import java.util.Stack;

public class DailyTemperatures {
    public static int[] dailyTemperatures(int[] temperatures) {
        int[] result = new int[temperatures.length];
        Stack<Integer> stack = new Stack<>();
        
        for (int i = 0; i < temperatures.length; i++) {
            while (!stack.isEmpty() && temperatures[i] > temperatures[stack.peek()]) {
                int index = stack.pop();
                result[index] = i - index;
            }
            stack.push(i);
        }
        
        return result;
    }

    public static void main(String[] args) {
        int[] temperatures1 = {73, 74, 75, 71, 69, 72, 76, 73};
        printArray(dailyTemperatures(temperatures1)); // Output: [1, 1, 4, 2, 1, 1, 0, 0]

        int[] temperatures2 = {30, 40, 50, 60};
        printArray(dailyTemperatures(temperatures2)); // Output: [1, 1, 1, 0]

        int[] temperatures3 = {30, 60, 90};
        printArray(dailyTemperatures(temperatures3)); // Output: [1, 1, 0]
    }

    private static void printArray(int[] arr) {
        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}




                             HashMap Assignment

Ans 1.

import java.util.*;

public class SortedMapByKey {
    public static void main(String[] args) {
        // Creating a map with unsorted keys
        Map<Integer, String> map = new TreeMap<>();
        map.put(5, "Rahul");
        map.put(7, "Lakshman");
        map.put(1, "Ram");
        map.put(4, "Krrish");
        map.put(2, "Lakshay");

        // Printing the map sorted by keys
        System.out.println(map);
    }
}


Ans 2.

import java.util.*;

public class SortedMapByValue {
    public static void main(String[] args) {
        Map<Integer, String> map = new HashMap<>();
        map.put(5, "Rahul");
        map.put(7, "Lakshman");
        map.put(1, "Ram");
        map.put(4, "Krrish");
        map.put(2, "Lakshay");

        // Convert the map to a list of entries
        List<Map.Entry<Integer, String>> list = new ArrayList<>(map.entrySet());

        // Sort the list by values
        list.sort(Map.Entry.comparingByValue());

        // Print the sorted list
        System.out.println(list);
    }
}


Ans 3.

import java.util.HashSet;
import java.util.Set;

public class DetectDuplicate {
    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 1}; // Input array

        System.out.println(hasDuplicate(array));
    }

    public static boolean hasDuplicate(int[] array) {
        Set<Integer> set = new HashSet<>();
        for (int num : array) {
            if (!set.add(num)) {
                return true; // Duplicate found
            }
        }
        return false; // No duplicate found
    }
}


Ans 4.

import java.util.HashMap;
import java.util.Map;

public class MajorityElement {
    public static void main(String[] args) {
        int[] nums = {3, 2, 3}; // Input array

        System.out.println(findMajorityElement(nums));
    }

    public static int findMajorityElement(int[] nums) {
        Map<Integer, Integer> countMap = new HashMap<>();
        int majorityCount = nums.length / 2;

        for (int num : nums) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
            if (countMap.get(num) > majorityCount) {
                return num;
            }
        }

        throw new IllegalArgumentException("No majority element found");
    }
}



Ans 5.


import java.util.HashMap;
import java.util.Map;

public class RansomNote {
    public static void main(String[] args) {
        String ransomNote = "aa";
        String magazine = "aab";

        System.out.println(canConstruct(ransomNote, magazine));
    }

    public static boolean canConstruct(String ransomNote, String magazine) {
        Map<Character, Integer> magazineCount = new HashMap<>();

        // Count the frequency of each character in magazine
        for (char c : magazine.toCharArray()) {
            magazineCount.put(c, magazineCount.getOrDefault(c, 0) + 1);
        }

        // Check if ransomNote can be constructed
        for (char c : ransomNote.toCharArray()) {
            if (magazineCount.getOrDefault(c, 0) == 0) {
                return false; // Character not found or not enough occurrences
            }
            magazineCount.put(c, magazineCount.get(c) - 1);
        }

        return true;
    }
}


